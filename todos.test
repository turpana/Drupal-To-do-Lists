<?php

/**
 * @file
 * Simpletest case for todos module.
 *
 * Verify todos module functionality.
 */
class TodosTestCase extends DrupalWebTestCase {
  protected $administrator;
  protected $can_create_todos;
  protected $other_user;

  public static function getInfo() {
    return array(
      'name' => 'Todo List Content Type',
      'description' => 'Ensures that the todos content type provided functions properly.',
      'group' => 'Todos',
    );
  }

  function setUp() {
    parent::setUp('todos');
    // Create users.
    $permissions = array(
      'access content', 
      'create todo_list content', 
      'edit own todo_list content',
      'delete own todo_list content'
    );
    $this->can_create_todos = $this->drupalCreateUser($permissions);
    $this->other_user = $this->drupalCreateUser(array('access content'));
  }

  function testContentType() {

    $this->drupalLogin($this->can_create_todos);

    // Create a new todo list.
    $edit = array(
      'title' => $this->randomName(8),
      'body[und][0][value]' => $this->randomName(8),
    );
    $this->drupalPost('node/add/todo-list', $edit, t('Save'));
    $this->assertText("Todo List " . $edit['title'] . " has been created", "Found node creation message");

    // Update todo list title and description
    $edited = array(
      'title' => $this->randomName(8),
      'body[und][0][value]' => $this->randomName(255),
    );
    $this->drupalPost('node/1/edit', $edited, t('Save'));
    $this->assertText("Todo List " . $edited['title'] . " has been updated.", "Found node update message");
    $this->assertText($edited['body[und][0][value]'], "Found edited node body");

    $this->drupalLogin($this->other_user);
    $this->drupalGet('node/1');
    $this->assertResponse(200, t('Make sure user can view other todo list'));

    $this->drupalGet('node/1/edit');
    $this->assertResponse(403, t('Make sure other user cannot edit todo list'));
    $this->drupalGet('node/1/delete');
    $this->assertResponse(403, t('Make sure other user cannot delete todo list'));

    // Delete a todo list
    $this->drupalLogin($this->can_create_todos);
    $this->drupalPost('node/1/edit', array(), t('Delete'));
    $this->drupalPost('node/1/delete',array(), t('Delete'));
    $this->assertText("Todo List " . $edited['title'] . " has been deleted.", "Found node delete message");

  }

  function testEntityType() {
    $this->drupalLogin($this->can_create_todos);

    // Create new todo
    $todo_list = array(
      'title' => $this->randomName(8),
      'body[und][0][value]' => $this->randomName(255),
    );
    $this->drupalPost('node/add/todo-list', $todo_list, t('Save'));
    $edit_todo = array(
      'title' => $this->randomName(8),
    );
    $this->drupalPost('node/1', $edit_todo, t('Add'));
    $this->assertText($edit_todo['title']);
    // Edit a todo
    $edit_todo['title'] = $this->randomName(8);
    $this->drupalPost('todo-item/1/edit', $edit_todo, t('Save'));
    $this->assertText($edit_todo['title']);
    // Create multiple todos
    $edit_todo_2 = array(
      'title' => $this->randomName(8),
    );
    $this->drupalPost('node/1', $edit_todo_2, t('Add'));
    $this->assertText($edit_todo_2['title']);
    $edit_todo_3 = array(
      'title' => $this->randomName(129),
    );
    $this->drupalPost('node/1', $edit_todo_3, t('Add'));
  }
  // Todos create test to make sure nodes and table are deleted on uninstall
}
