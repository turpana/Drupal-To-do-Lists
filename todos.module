<?php

/**
* @file
* Module file for Todo List module
*/

/**
 * MODULE PATHS
 */

/**
 * Implements hook_menu() 
 * Defines paths module will use
 */
function todos_menu() {
  $items['todos'] = array(
    'title' => 'My to-do lists',
    'page callback' => 'todos_user_todo_lists',
    'access arguments' => array('manage own todos'),
    'weight' => 10, 
    'type' => MENU_NORMAL_ITEM,
  );
  $items['todos/list/%todo_list'] = array(
    'title callback' => 'todos_entity_title',
    'title arguments' => array(2),
    'page callback' => 'todos_todo_list',
    'page arguments' => array(2),
    'access callback' => 'todos_enforce_permissions',
    'access arguments' => array(2),
    'weight' => 10,
    'type' => MENU_NORMAL_ITEM,
  );
  $items['todos/list/%todo_list/edit'] = array(
    'title' => 'Edit to-do list',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('todo_list_edit_form', 2),
    'access callback' => 'todos_enforce_permissions',
    'access arguments' => array(2),
    'weight' => 10,
    'type' => MENU_NORMAL_ITEM,
  );
  $items['todos/item/%todo_item/completed'] = array(
    'title callback' => 'todos_entity_title',
    'title arguments' => array(2),
    'page callback' => 'todos_todo_item_completed',
    'page arguments' => array(2),
    'access callback' => 'todos_enforce_permissions',
    'access arguments' => array(2),
    'weight' => 10,
    'type' => MENU_CALLBACK,
  );
 $items['todos/item/%todo_item/edit'] = array(
    'title' => 'Edit to-do item',
    'page callback' => 'drupal_get_form', 
    'page arguments' => array('todo_item_edit_form', 2),
    'access callback' => 'todos_enforce_permissions',
    'access arguments' => array(2),
    'weight' => 10,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * ACCESS FUNCTIONS
 */

/**
 * Implements hook_permission().
 * Defines what permissions will be enforced by module
 */ 
function todos_permission() {
  return array(
    'manage own todos' => array(
      'title' => t('Manage own todo lists and items'),
      'description' => t('Create, edit, and delete own todo lists and items'),
    ),
    'manage any todos' => array(
      'title' => t('Manage any todo lists and items'),
      'description' => t('Create, edit, and delete any todo lists or items'),
    ),
  );
}

/**
 * Enforces access permissions for entity types todo_list and todo_item
 *
 * @param $todo_entityÂ¬
 *   Entity object to check permission for.
 */
function todos_enforce_permissions($todo_entity, $account = NULL){
  if ($account == null) {
    global $user;
    $account = $user;
  }
  $is_author = $account->uid == $todo_entity->uid;

  if (user_access('manage own todos', $account) && $is_author) return TRUE;
  elseif (user_access('manage any todos')) return TRUE;
  
  return FALSE; // No access for any condition no accounted for
}

/**
 * ENTITY DEFINITIONS
 */

/**
 * Implements hook_entity_info().
 */
function todos_entity_info() {
  return array(
    'todo_list' => array(
      'label' => t('Todo List'),
      'plural label' => t('Todo Lists'),
      'description' => t('Entity type representing a todo list'),
      'entity class' => 'Entity',
      'controller class' => 'TodoListController',
      'base table' => 'todo_list',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'lid',
      ),
      'bundles' => array(
        'todo_list' => array(
          'label' => 'To-do List',
        ),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
    ),
    'todo_item' => array(
      'label' => t('Todo Item'),
      'plural label' => t('Todo Items'),
      'description' => t('Entity type representing a todo item'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'todo_item',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'iid',
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
    ),
  );
}

/**
 * PAGE CALLBACKS
 */

/**
 * Displays multiple lists for a given user & form for adding new list
 *
 * @param $user
 *   User/author of lists
 */
function todos_user_todo_lists (){
  global $user;
  $db_query_results = todo_lists_load($user->uid); 
  $lists = array();
  foreach ($db_query_results as $result) {
    $lists[] = $result;
  }
  $render_array = array(
    'todo_lists' => array(
      'lists' => $lists,
      '#theme' => 'todo_lists',
    ),
    'todo_list_add_form' => drupal_get_form('todo_list_add_form'),
  );
  return $render_array;
}

/**
 * Displays items for a given list & form for adding new list
 *
 * @param $todo_list
 *   todo_list entity object
 */
function todos_todo_list($todo_list) {
  $db_query_results = todos_item_load_items_by_lid($todo_list->lid);
  $items = array();
  foreach ($db_query_results as $item) {
    $items[] = $item;
  }
  $render_array = array(
    'todo_list' => array(
      'items' => $items,
      '#theme' => 'todo_list',
    ),
    'todo_item_add_form' => drupal_get_form('todo_item_add_form', $todo_list->lid),
  );
  return $render_array;
}

/**
 * Updates a todo_item as completed and redirects back to todo_list
 *
 * @param $todo_item
 *   todo_item entity object 
 */
function todos_todo_item_completed($todo_item) {
  $todo_item->status = 0;
  $item_title = $todo_item->title;
  $redirect_path = 'todos/list/' . $todo_item->lid;
  /**/
  if ($todo_item->save()) drupal_set_message(t('Item marked completed'));
  else drupal_set_message(t('The item could not be updated. Please contact the site administrator for troubleshooting'));
  /**/
  drupal_goto($redirect_path, array(), 301);
}

/**
 * BLOCKS
 */
/**
 * Implements hook_block_info().
 * Defines block for this module
 */
function todos_block_info() {
  $blocks['todo_lists'] = array(
    'info' => t('My to-do lists'),
    'status' => 1,
    'region' => 'sidebar_first',
    'weight' => 10,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}
/**
 * Implements hook_block_view().
 * Loads the content for the block.
 *
 * @param delta
 *   Which block to display, when there are multiple defined by module
 */
function todos_block_view($delta) {
  global $user;
  $db_query_results = todo_lists_load($user->uid);
  $lists = array();
  foreach ($db_query_results as $result) {
    $lists[] = $result;
  }
  $block['subject'] = t('My to-do lists');
  $block['content'] = array(
    'todo_lists' => array(
      'lists' => $lists,
      'block' => TRUE,
      '#theme' => 'todo_lists',
    ),
  );
  return $block;
}

/**
 * FORMS
 */

/**
 * Generates form for adding new todo_list entities
 */
function todo_list_add_form($form, &$form_state) {
  $form['#prefix'] = '<div id="ajax-todo-list-add-form">';
  $form['#suffix'] = '</div>';
  $form['create'] = array(
    '#type' => 'button',
    '#value' => t('Create new list'),
    '#ajax' => array(
      'callback' => 'ajax_handler_todo_list_add_form',
      'wrapper' => 'ajax-todo-list-add-form',
      'method' => 'replace',
      'effect' => 'slide',
    ),
  );
  $form['create']['#ajax']['progress']['message'] = null;
  $form['title'] = array(
    '#title' => 'New to-do list',
    '#type' => 'textfield',
    '#maxlength' => 128,
    '#required' => TRUE,
    '#access' => FALSE,
  );
  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#access' => FALSE,
  );
  $form['save_and_edit'] = array(
    '#type' => 'submit',
    '#value' => t('Save and edit'),
    '#access' => FALSE,
  );
  // If form is built with input values
  //$clicked_button = isset($form_state['clicked_button']['#value']) ? $form_state['clicked_button']['#value'] : 'FALSE'; 
  if ( !empty($form_state['values']['create'])) {
    $form['create']['#access'] = FALSE;
    $form['title']['#access'] = TRUE;
    $form['save_and_edit']['#access'] = TRUE;
    $form['save']['#access'] = TRUE;
  }
  return $form;
}
/**
 * Handles ajax response for todo_list_add_form
 */
function ajax_handler_todo_list_add_form($form, &$form_state) {
  return $form;
}
/**
 * Handles form validation for todo_list_add_form
 */
function todo_list_add_form_validate($form, &$form_state) {
  // No special validation needed
}
/**
 * Handles form submission for todo_list_add_form
 */
function todo_list_add_form_submit($form, &$form_state) {
  global $user;
  $submit_op = $form_state['input']['op'] ? $form_state['input']['op'] : FALSE;
  $values = array(
    'title' => $form_state['values']['title'],
    'uid' => $user->uid,
    'created' => time(),
  );
  $entity = entity_create('todo_list', $values);
  if (! $entity->save()) {
    drupal_set_message(t('List could not be created. Please contact the site adminstrator for more information.'), 'error');
  }
  else {
    drupal_set_message(t('New to-do list was successfully created.'));
  }
  if (t('Save and edit') === $submit_op) {
    $form_state['redirect'] = 'todos/list/'.$entity->lid;
  }
}
/*
 * Defines the edit todo_list form
 */
function todo_list_edit_form($form, &$form_state) {
  $form['title'] = array(
    '#title' => t('Item'),
    '#type' => 'textfield',
    '#default_value' => isset($form_state['build_info']['args'][0]) ? $form_state['build_info']['args'][0]->title : '',
    '#maxlength' => 128,
    '#required' => TRUE,
  );
  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}
/**
 * Handles todo_list edit form validation
 * /
function todo_list_edit_form_validate($form, &$form_state) {}
/**
 * Handles todo_list edit form submission
 */
function todo_list_edit_form_submit($form, &$form_state) {
  $entity = $form_state['build_info']['args'][0];
  $entity->title = $form_state['values']['title'];
  if($entity->save()) drupal_set_message(t('To-do list was successfully updated.'));
  $form_state['redirect'] = 'todos/';
}
/**
 * Defines the add a todo item form
 */
function todo_item_add_form($form, &$form_state) {
  $form['#prefix'] = '<div id="ajax-todo-item-add-form">';
  $form['#suffix'] = '</div>';
  $form['create'] = array(
    '#type' => 'button',
    '#value' => t('Add item'),
    '#ajax' => array(
      'callback' => 'ajax_handler_todo_item_add_form',
      'wrapper' => 'ajax-todo-item-add-form',
      'method' => 'replace',
      'effect' => 'slide',
    ),
  );
  $form['create']['#ajax']['progress']['message'] = null;
  $lid = $form_state['build_info']['args'][0];
  $form['lid'] = array(
    '#type' => 'value',
    '#value' => $lid,
  );
  $form['title'] = array(
    '#title' => t('New to-do item'),
    '#type' => 'textfield',
    '#maxlength' => 128,
    '#required' => TRUE,
    '#access' => FALSE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#access' => FALSE,
  );
  if ( ! empty($form_state['values']['create']) ) {
    $form['create']['#access'] = FALSE;
    $form['title']['#access'] = TRUE;
    $form['submit']['#access'] = TRUE;
  }
  return $form;
}
/**
 * Handles ajax response for todo_item_add_form
 */
function ajax_handler_todo_item_add_form($form, &$form_state) {
  return $form;
}
/**
 * Handles todo_item form validation
 * No special validation needed yet
 * /
function todo_item_add_form_validate($form, &$form_state) {
}/**/
/**
 * Handles todo_item form submission
 */
function todo_item_add_form_submit($form, &$form_state) {
  global $user;
  $values = array(
    'title' => $form_state['values']['title'],
    'lid' =>  $form_state['values']['lid'],
    'uid' => $user->uid,
    'created' => time(),
  );
  $entity = entity_create('todo_item', $values);
  if ($entity->save()) {
    drupal_set_message(t('New to-do list was successfully created.'));
  }
}
/**
 * Defines the edit todo_item form
 */
function todo_item_edit_form($form, &$form_state) {
  $form['title'] = array(
    '#title' => t('Item'),
    '#type' => 'textfield',
    '#default_value' => isset($form_state['build_info']['args'][0]) ? $form_state['build_info']['args'][0]->title : '',
    '#maxlength' => 128,
    '#required' => TRUE,
  );
  $form['status'] = array(
    '#title' => t('Status'),
    '#type' => 'select',
    '#options' => array(
      0 => 'completed',
      1 => 'active'
    ),
    '#default_value' => isset($form_state['build_info']['args'][0]) ? $form_state['build_info']['args'][0]->status : 0,
    '#required' => TRUE,
  );
  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
  );
  return $form;
}
/**
 * Handles todo_item edit form validation
 * /
function todo_item_edit_form_validate($form, &$form_state) {}
/**
 * Handles todo_item edit form submission
 */
function todo_item_edit_form_submit($form, &$form_state) {
  $entity = $form_state['build_info']['args'][0];
  switch($form_state['values']['op']) {
    case $form_state['values']['delete']:
      if ($entity->delete()) drupal_set_message(t('To-do item was successfully deleted.'));
      break;
    case $form_state['values']['save']:
    default:
      $entity->title = $form_state['values']['title'];
      $entity->status = $form_state['values']['status'];
      if($entity->save()) drupal_set_message(t('To-do item was successfully updated.'));
      break;
  }
  $form_state['redirect'] = 'todos/list/' . $entity->lid;
}

/**
 * DATA LOADING FUNCTIONS
 */
/**
 * Loads todo_list entities for a given user
 */
function todo_lists_load($uid) {
  $result = db_query('SELECT lid, title, items FROM {todo_list} WHERE uid = :uid ORDER BY items DESC',
    array(':uid' => $uid)
  );
  return $result;
}
/**
 * Loads todo_item entities for a given list
 */
function todo_list_load($lid) {
  $item = entity_load_single('todo_list', $lid);
  return $item;
}
/**
 * Loads todo_item from url wildcard
 */
function todo_item_load($iid) {
  $item = entity_load_single('todo_item', $iid);
  return $item;
}
/**
 * Loads todo_item for a given primary id or 'item id'
 */
function todos_load_item_by_pid($iid) {
  return entity_load('todo_item', array($iid));
}
/**
 * Loads todo_item entities for a given todo_list
 *
 * @param $lid
 *   todo_list primary key
 * @parma $all
 *   Boolean instructing whether all items should be loaded
 */
function todos_item_load_items_by_lid($lid, $all=FALSE) {
  if ($all) {
    $query_string = 'SELECT iid, title, created FROM {todo_item} WHERE lid = :lid ORDER BY created DESC';
  } else {
    $query_string = 'SELECT iid, title, created FROM {todo_item} WHERE lid = :lid AND status = 1 ORDER BY created DESC';
  }
  $result = db_query($query_string, array(':lid' => $lid));
  return $result;
}
/**
 * Returns entity title
 */
function todos_entity_title($entity) {
  return $entity->title;
}

/**
 * DATA UPDATE FUNCTIONS/HOOKS
 */
/**
 * Implements hook_entity_insert().
function todos_entity_insert($entity, $entity_type) {}
 */
/**
 * Implements hook_entity_update().
function todos_entity_update($entity, $entity_type) {}
 */
/**
 * Implements hook_entity_delete().
function todos_entity_delete($entity, $entity_type) {}
 */
/**
 * Implements hook_entity_type_insert() for todo_item entity type
 * Updates referenced todo_list to keep number of active items current
 */
function todos_todo_item_insert($entity) {
  $entity_list = entity_load_single('todo_list', $entity->lid);
  $entity_list->save();
}
/**
 * Implements hook_entity_type_update() for todo_item entity type
 * Updates referenced todo_list to keep number of active items current
 */
function todos_todo_item_update($entity) {
  $entity_list = entity_load_single('todo_list', $entity->lid);
  $entity_list->save();
}
/**
 * Implements hook_entity_type_delete() for todo_item entity type
 * Updates referenced todo_list to keep number of active items current
 */
function todos_todo_item_delete($entity) {
  $entity_list = entity_load_single('todo_list', $entity->lid);
  $entity_list->save();
}

/**
 * THEME FUNCTIONS
 */

/**
 * Implements hook_theme().
 * Registers theme functions and template files
 */
function todos_theme($existing, $type, $theme, $path) {
  return array(
    'todo_lists' => array(
      'render element' => 'todo lists',
      'template' => 'todo-lists',
      'path' => $path .'/theme',
    ),
    'todo_list' => array(
      'render element' => 'todo list',
      'template' => 'todo-list',
      'path' => $path . '/theme',
    ),
    'todo_item' => array(
      'render element' => 'item',
      'template' => 'todo-item',
      'path' => $path . '/theme',
    ),
  );
}

/**
 * Processes variables for todo_lists template file
 */
function todos_preprocess_todo_lists(&$vars) {
  $rendering_block = isset($vars['todo lists']['block']) ? $vars['todo lists']['block'] : FALSE;
  foreach ($vars['todo lists']['lists'] as $list) {
    // If rendering page, render links to edit list
    if (! $rendering_block ) {
      $vars['lists'][] = 
        $list->title
        . ' ('
        . l(
          format_plural($list->items, '1 active item', '@count active items'),
          'todos/list/'.$list->lid, 
          array(
            'attributes' => array(
              'title' => $list->title,
              'class' => array('todo-list-action'),
            )
          )
        )
        . ' | '
        . l(
          t('edit'),
          'todos/list/'.$list->lid.'/edit',
          array(
            'attributes' => array(
              'title' => 'Edit list',
              'class' => array('todo-list-action'),
            )
          )
        )
        . ')';
    } else {
    // If rendering block, only render links to list pages
      $vars['lists'][] = l(
          $list->title
          . ' ('
          . format_plural($list->items, '1 active item', '@count active items')
          . ')',
        'todos/list/'.$list->lid, 
        array(
          'attributes' => array(
            'title' => $list->title,
            'class' => array('todo-list-action'),
          )
        )
      );
    }
  }
}
/**/
/**
 * Processes variables for todo_list template file
 */
function todos_preprocess_todo_list(&$vars) {
  foreach ($vars['todo list']['items'] as $item) {
    $vars['items'][] = 
        $item->title
        . '<span class="todo-item-actions">'
        . ' ('
        . l('edit', 'todos/item/'.$item->iid.'/edit', array(
            'attributes' => array(
              'title' => 'Edit item',
              'class' => array('todo-item-action'),
            )
          ))
        . ' | '
        . l('mark completed', 'todos/item/'.$item->iid.'/completed', array(
            'attributes' => array(
              'title' => 'Mark item as complete',
              'class' => array('todo-item-action'),
            )
          ))
        . ')'
        . '</span>';
  }
}
/**/
