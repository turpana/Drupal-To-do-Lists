<?php
/**
* @file
* Module file for Todo List Content Type module
*/

/**
 * Implements hook_permission().
 */ 
function todos_permission() {
  return array(
    'create todo_list content' => array(
      'title' => t('Create a todo list'),
      'description' => t('Create a new todo list'),
    ),
    'edit own todo_list content' => array(
      'title' => t('Edit own todo list'),
      'description' => t('Edit own todo list'),
    ),
    'edit any todo_list content' => array(
      'title' => t('Edit any todo list'),
      'description' => t('Edit any todo list'),
    ),
    'delete own todo_list content' => array(
      'title' => t('Delete own todo list'),
      'description' => t('Delete own todo list'),
    ),
    'delete any todo_list content' => array(
      'title' => t('Delete any todo list'),
      'description' => t('Delete any todo list'),
    ),
  );
}

/**
 * Implements hook_node_info().
 */
function todos_node_info() {
  return array(
    'todo_list' => array(
      'name' => t('Todo List'),
      'base' => t('todo_list'),
      'description' => t('Use this to create a new list of todo items'),
      'has_title' => TRUE,
      'title_label' => t('Title'),
    ),
  );
}

/**
 * Implements hook_node_access().
 */
function todo_list_node_access($node, $op, $account) {
  if (is_object($node)) {
    $is_author = $account->uid == $node->uid;
  } else if ($op == 'create') {
    $is_author = TRUE;
  } else {
    // If $node is not object and $op is not create, don't really know what's going on so deny access.
    return NODE_ACCESS_IGNORE;
  }

  switch ($op) {
  case 'create':
    if (user_access('create todo_list content', $account)) {
      return NODE_ACCESS_ALLOW;
    }
    break;

  case 'update':
    if (user_access('edit own todo_list content', $account) && $is_author ||
      user_access('edit any todo_list content', $account)) {
      return NODE_ACCESS_ALLOW;
    }
    break;

  case 'delete':
    if (user_access('delete own todo_list content', $account) && $is_author ||
      user_access('edit own todo_list content', $account)) {
      return NODE_ACCESS_ALLOW;
    }
    break;

  default:
    return NODE_ACCESS_IGNORE;
  }
}

/**
 * Implements hook_form() with the standard default node form.
 */
function todo_list_form($node, $form_state) {
  return node_content_form($node, $form_state);
}
/**
 * Implements hook_view() to display items and form
 */
function todo_list_view($node, $view_mode) {
  /*
  //$item = entity_load_single('todo_item', 1);
  if (is_object($item)) {
    $node->content['todos'] = array(
      '#markup' => '<h3>Todos</h3><p>' . $item->title . '</p>',
      '#weight' => 90,
    );
  }
  */
  // Get todo_items from db
  $items = todo_item_load_items($node->nid);
  // Append todo_items to $node->content
  $node->content['todos']['#markup'] = '<div>Todo items</div>';
  $node->content['todos']['#markup'] .= '<ul>';
  foreach ($items as $item) {
    $node->content['todos']['#markup'] .= '<li>';
    $node->content['todos']['#markup'] .= $item->title;
    $node->content['todos']['#markup'] .= '</li>';
  }
  $node->content['todos']['#markup'] .= '</ul>';
  $node->content['todos']['#weight'] = 90;
  // Get todo_item form
  $item_form = array(
    drupal_get_form('todo_item_form', $node->nid)
  );
  $node->content['list_form'] = array(
    $item_form,
  );
  $node->content['list_form']['#weight'] = 100;
  return $node;
}

/**
 * Implements hook_entity_info().
 */
function todos_entity_info() {
  return array(
    'todo_item' => array(
      'label' => t('Todo Item'),
      'plural label' => t('Todo Items'),
      'description' => t('Entity type used by teh Todo List Content Type module'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'todo_item',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'pid',
        // 'bundle' => 'name', // Not sure if this is needed
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
    ),
  );
}
/**
 * Defines todo item form
 */
function todo_item_form($form, &$form_state) {
  $lid = $form_state['build_info']['args'][0];
  $form['lid'] = array(
    '#type' => 'value',
    '#value' => $lid,
  );
  $form['title'] = array(
    '#title' => t('Add an item'),
    '#type' => 'textfield',
    '#description' => t('Enter new item'),
    '#maxlength' => 128,
    '#required' => TRUE,
  );
  $form['add'] = array(
    '#type' => 'submit',
    '#value' => t('Add'),
  );
  return $form;
}
/**
 * Handles todo item form validation
 */
function todo_item_form_validate($form, &$form_state) {
}
/**
 * Handles todo item form submission
 */
function todo_item_form_submit($form, &$form_state) {
  global $user;
  $values = array(
    'title' => $form_state['values']['title'],
    'lid' =>  $form_state['values']['lid'],
    'uid' => $user->uid,
    'created' => time(),
  );
  $entity = entity_create('todo_item', $values);
  $entity->save();
  $form_state['redirect'] = 'node/' . $form_state['values']['lid'];
}
/**
 * Loads todo items for a given todo list
 */
function todo_item_load_items($lid) {
  $result = db_query('SELECT title FROM {todo_item} WHERE lid = :lid', 
    array(':lid' => $lid));
  return $result;
}
